package require ag 0.3

set SRT_VERSION 1.4.0

lassign [split $SRT_VERSION .] SRT_VERSION_MAJOR SRT_VERSION_MINOR SRT_VERSION_PATCH

#set VERSION 1.3.0

if { [info exists ENABLE_CLANG_SANITIZER] } {
	set USE_CLANG 1
}

# Choosing the toolchain profile is a little bit more complicated than just select one.
# There's a separate script for that, pushed there in order not to make so much noise.
source ag/ag-choose-toolchain-profile.tcl
ag-profile posix-install

ag-option --std "" ~c++*

if { ![info exists STD] } {
	set STD [ag-option --std]
}

if { $STD != "" } {
	# Parse the STD spec
	set STD [string tolower $STD]
	if { [string range $STD 0 2] != "c++" } {
		error "STD variable should specify a C++ standard"
	}
	set stdver [string range $STD 3 end]
	if { $stdver == "0x" } {
		set stdver 11
	}
	set parts [split $stdver ""]
	if { [lindex $parts 0] < 1 } {
		set STD_APPS c++11
		if { $stdver != "03" } {
			error "C++0x series is only C++03"
		}
	} else {
		if { $stdver ni {11 14 17} } {
			error "$STD: unknown C++ standard"
		}
		set STD_APPS $STD
	}
	set STD_SRTLIB $STD
} else {
	set STD_SRTLIB "" ;# use compiler default
	set STD_APPS c++11
}

set clang_sanitizers {
	address
	leak
	thread
	undefined
	memory
}

if { [info exists ENABLE_CLANG_SANITIZER] } {

	if {$ENABLE_CLANG_SANITIZER ni $clang_sanitizers} {
		error "Invalid sanitizer: '$ENABLE_CLANG_SANITIZER'. Available: [join $clang_sanitizers { }]"
	}
	ag-profile {c c++} -cflags -- -fsanitize=$ENABLE_CLANG_SANITIZER
	ag-profile {c c++} -ldflags -- -fsanitize=$ENABLE_CLANG_SANITIZER
}

# Experimental: Use a separate directory for intermediate files
#namespace eval agv::p {
#proc gen-imfile-mydir-path {target srcfile} {
#	file mkdir $::agv::builddir/im
#	return im/[gen-imfile-path $target $srcfile]
#}
#}
#ag-profile general -imgen mydir-path

# Ok, now variables

pinit ENABLE_WIN32_SHARED 0
pinit ENABLE_STDCXX_SYNC 0

set srtstatic 0
set srtshared 0

if { [info exists WITH_LIBSPEC] } {
	if { [string first , $WITH_LIBSPEC] != -1 } {
		set WITH_LIBSPEC [split $WITH_LIBSPEC ,]
	}

	if { "shared" in $WITH_LIBSPEC } {
		set srtshared 1
	}

	if { "static" in $WITH_LIBSPEC } {
		set srtstatic 1
	}
} else {

	if { [phas ENABLE_SHARED] } {
		set srtshared 1
	}

	if { [phas ENABLE_STATIC] } {
		set srtstatic 1
	}
}

# Enable static and shared by default
# Disable shared only if ENABLE_STATIC
# Keep default shared enabled due to LGPL requirements.
# Keep also static enabled because it's required as a dependency of stransmit.

if { $srtshared == 0 && $srtstatic == 1 } {
	pset srt_libspec static
} else {
	pset srt_libspec static shared
}

puts "SRT LIBSPEC: $srt_libspec"

ag-profile {c c++} -D {SRT_VERSION=\"$SRT_VERSION\"}


# -- Selecting  debug/release version

# XXX This feature is not yet supported
# if { [ag-config option ?buildtype] == "debug" } {
# 	set SRT_DEBUG_ENABLED 1
# 	set SRT_DEBUG_OPT "-ggdb -O0"
# } else {
# 	set SRT_DEBUG_ENABLED 0
# 	set SRT_DEBUG_OPT "-O2 -DNDEBUG"
# }
# ag-profile {c c++} -cflags $SRT_DEBUG_OPT

# Old name
if { [phas DEBUG] } {
	set ENABLE_DEBUG $DEBUG
}

# CONSIDER:
# set BUILD_TYPE [ag-config option ?buildtype]
switch -- [pget ENABLE_DEBUG] {
	"" - 0 {
		set BUILD_TYPE release
	}

	1 {
		set BUILD_TYPE debug
	}

	2 {
		set BUILD_TYPE release-debug-info
	}
}

set foptimize [pis $BUILD_TYPE release* ? -O3 : -O0]
set fdebug [pis $BUILD_TYPE *debug* ? -g -D_DEBUG : -DNDEBUG]

puts "BUILD TYPE: $BUILD_TYPE  cflags: opt:$foptimize debug:$fdebug"

ag-profile {c c++} -cflags -- $foptimize $fdebug

# XXX EXPERIMENTAL for socket groups
ag-profile {c c++} -D SRT_ENABLE_APP_READER

set ENABLE_HEAVY_LOGGING_DEFAULT [string match *debug* $BUILD_TYPE]

pinit ENABLE_LOGGING 1
pinit ENABLE_HEAVY_LOGGING $ENABLE_HEAVY_LOGGING_DEFAULT
pinit ENABLE_ENCRYPTION 1


# -- Selecting profiled version

# if [ag-config enable build-profile] ...

if { [phas env(SRT_BUILD_PROFILE)] } {
	puts "+++ Build will include PROFILE INFORMATION"
	set SRT_BUILD_PROFILE 1
} else {
	set SRT_BUILD_PROFILE 0
}

# -- C/C++ header dependency file handling flavor
ag-profile general -depspec cached -dumpinfo on

# -- Turn on all best warnings
ag-profile general -cflags -- -Wall -Wextra


# ------------
# Targets
# -----------

# Main target definition: Libraries in the srt package.

set haicrypt_libspec virtual

set TARGET_srt srt

# This is required for resolving haicrypt as virtual library,
# which will be fixed when the virtual targets are supported.
set TARGET_haicrypt haicrypt

if { [pget WITH_SRT_NAME] != "" } {
	set TARGET_srt $WITH_SRT_NAME
}

if { [pget WITH_HAICRYPT_NAME] != "" } {
	set TARGET_haicrypt $WITH_HAICRYPT_NAME
}

ag $TARGET_haicrypt -type library
ag $TARGET_srt -type library

proc export-flag {name {target {}}} {
	if { [uplevel phas $name] } {
		if {$target == {}} {
			ag-profile {c c++} -D $name=1
		} else {
			ag $target -D $name=1
		}
	}
}

# Use this flag for library and all apps
if { $ENABLE_LOGGING } {
	ag-profile general -D ENABLE_LOGGING=1

	export-flag ENABLE_HEAVY_LOGGING
}

export-flag ENABLE_ENCRYPTION $TARGET_srt
export-flag ENABLE_GETNAMEINFO
export-flag ENABLE_PKTINFO
export-flag ENABLE_BONDING

# XXX
# As Silvercat doesn't support virtual libraries yet,
# we have to screw it up a little bit. This will be changed
# to normal library definition and processing once virtual
# library type is supported.

# Full support of virtual library requires that all sources
# of the dependent library be compiled according to the cflags
# defined in this very library, which need not be the same as
# the cflags defined in the depending library. Only linker flags
# are just integrated linker flags for both. Here it's not preserved.
# {
if { $haicrypt_libspec == "virtual" } {

	# Turn off automatic compiling of this library. Just stays for formality.
	# Set the language manually because without sources it won't be autodetected.
	ag $TARGET_haicrypt -runon demand -language c++

	# Make all next settings for haicrypt apply directly on srt
	set TARGET_haicrypt $TARGET_srt
} else {
	ag $TARGET_haicrypt -install lib -libspec $haicrypt_libspec
	ag $TARGET_srt -depends $TARGET_haicrypt
}
# }

ag $TARGET_srt -install lib -libspec $srt_libspec

if {$STD_SRTLIB != ""} {
	puts "NOTE: Using '$STD' as C++ standard for SRT"
	ag $TARGET_srt -std $STD_SRTLIB
}

# Ok, predefined, now specify the sources and public headers

# XXX on Windows add also srtcore/windows/win_time.cpp

# HaiCrypt

pinit USE_ENCLIB openssl

set enclib_modules {
	openssl {libssl libcrypto}
	gnutls {gnutls nettle}
	mbedtls {mbedtls mbedcrypto}
}

set sourcedirs ""

if {$ENABLE_ENCRYPTION} {

	# XXX Provide support for mbedtls and gnutls/nettle.
	pinit USE_ENCLIB openssl

	set maf_haicrypt [ag-maf $TARGET_haicrypt haicrypt filelist-$USE_ENCLIB.maf -s SOURCES -h {PUBLIC HEADERS} {PROTECTED HEADERS}]
	ag $TARGET_haicrypt -hidir srt
	ag $TARGET_haicrypt -packages [dict get $enclib_modules $USE_ENCLIB]
	lappend sourcedirs haicrypt

	if { $tcl_platform(os) == "Windows" } {
		ag-maf $TARGET_haicrypt common filelist_win32.maf -s SOURCES -h "PUBLIC HEADERS"
		lappend sourcedirs common
	}

	ag $TARGET_haicrypt -D {
	   HAICRYPT_USE_OPENSSL_EVP=1
	   HAICRYPT_USE_OPENSSL_AES
	}

	ag $TARGET_haicrypt -D USE_[string toupper $USE_ENCLIB]
}

# HaiSRT

set maf_srt [ag-maf $TARGET_srt srtcore filelist.maf -s SOURCES -h {PUBLIC HEADERS} {PROTECTED HEADERS}]
ag $TARGET_srt -hidir srt
lappend sourcedirs srtcore

if { [pget tcl_platform(os)] == "Linux" } {
	ag $TARGET_srt -ldflags -- -lpthread

	if {"shared" in [ag $TARGET_srt ?libspec] } {
		# Required by linking a shared library against a shared library
		puts "NOTE: adding -fPIC due to linking libsrt.so against libcrypto. ADD AUTOMATIC RECOGNITION."
		ag $TARGET_haicrypt -cflags -- -fPIC
	}
}

# In case when using clang, add -Wthread-safety
if {$GCCBASE == "clang"} {
	ag $TARGET_srt -cflags -- -Wthread-safety
}


# Instantiate and install config header
ag-instantiate ag/version.h.in include/version.h
ag $TARGET_srt -h //b:include/version.h
# Include path must be added to all targets, as they will include it intermediately
# (including apps)
ag-profile {c c++} -I //b:include

# XXX use the autogenerated pkg-config type here !!!
ag-instantiate scripts/srt.pc.in srt.pc
ag srt_pc -type custom -install lib -installdir pkgconfig -s scripts/srt.pc.in -o srt.pc

# XXX Use MAF file to specify these details!

# Include directories (see Issue #72)
ag-profile general -I [pdip $agv::srcdir/% {
	srtcore
	haicrypt
	common
}]

# Definitions
ag-profile general -D {
   _GNU_SOURCE
}

set linux [expr {[pget tcl_platform(os)] == "Linux" }]

if { $linux } {
	ag-profile general -D LINUX
}

if { $SRT_BUILD_PROFILE } {
	ag-profile general -cflags -- -g -pg
	ag $TARGET_srt -ldflags -- -g -pg
}

# Now collect all source file names for tags

pset sources [pluniq [concat [ag $TARGET_srt ?sources] [ag $TARGET_haicrypt ?sources]]]

#puts "SOURCES: $sources"

# Extract all header files for tag generations

set all_headers [dict:sel $maf_srt -glob "* HEADERS"]
if {$ENABLE_ENCRYPTION} {
	lappend all_headers {*}[dict:sel $maf_haicrypt -glob "* HEADERS"]
}

#puts "HEADERS FOR CTAGS: $all_headers"

set appdir apps
#set appdeveldir devel-apps
set appdeveldir testing
set exampledir examples

# Turn off compiling applications if static srt is unwanted
# because they will want to link against the static one.
if { "static" in $srt_libspec } {

	proc sprogram {name} {
		ag $name -type program -install bin -I $::appdir common
	}

	proc srtapp {prg args} {
		set name $prg
		sprogram $name

		# Application main source file
		ag $name -s $::appdir/$prg.cpp

		# Apps use ALL FILES from the support source category.
		ag-maf $name $::appdir support.maf -s SOURCES

		# All apps are C++11
		ag $name -std $::STD_APPS

		# Link against SRT
		ag $name -depends $::TARGET_srt/static
		if { [pget tcl_platform(os)] == "Linux" } {
			ag $name -ldflags -- -pthread
		}

		lappend ::appsources {*}[ag $name ?sources]
	}

	# Main SRT support applications	
	srtapp srt-live-transmit
	srtapp srt-file-transmit

	lappend sourcedirs $appdir

	proc testapp {prg args} {
		set name $prg
		sprogram $name

		# Add extra target settins if any
		ag $name {*}$args

		# All source files are taken exclusively from corresponding maf file.
		ag-maf $name $::appdeveldir $name.maf -s SOURCES
		lappend ::appsources {*}[ag $name ?sources]

		# Needed to use different IM file scheme as test sources
		# may reuse existing component sources
		ag $name -imgen target-name
		return $name
	}

	proc testapp-srt {prg args} {
		set name [testapp $prg {*}$args]

		ag $name -std $::STD_APPS
		ag $name -depends $::TARGET_srt/static
		if { [pget tcl_platform(os)] == "Linux" } {
			ag $name -ldflags -- -pthread
		}
	}

	# Testprogram: special-case app, which consists of:
	# - apps/PROGRAM_NAME.cpp
	# - optional extra sources in common/ directory

	testapp utility-test
	testapp uriparser-test -D TEST -std $::STD_APPS
	testapp-srt srt-test-live
	testapp-srt srt-test-file
	testapp-srt srt-test-relay
	ag srt-test-relay -D SRT_ENABLE_VERBOSE_LOCK -imgen target-name

	testapp-srt srt-test-multiplex

	lappend sourcedirs $appdeveldir

	lappend sourcedirs test

	proc exampleapp {prg args} {
		set name [file rootname $prg]

		sprogram $name

		ag $name -s examples/$prg {*}$args -imgen target-name
		ag-maf $name $::appdir support.maf -s SOURCES
		ag $name -depends $::TARGET_srt/static
		if { [pget tcl_platform(os)] == "Linux" } {
			ag $name -ldflags -- -pthread
		}
		if {[file extension $prg] != ".c"} {
			ag $name -std $::STD_APPS
		}
	}

	exampleapp sendfile.cpp -std $::STD_APPS
	exampleapp recvfile.cpp -std $::STD_APPS
	exampleapp recvlive.cpp -std $::STD_APPS
	exampleapp testcapi-connect.c

	#puts "APP SOURCES: $appsources"

	lappend sources {*}[pluniq $appsources]

} else {
	puts "NOTE: apps are disabled due to turning off static srt"
}

#puts "ALL SOURCES: $sources"

set ignoredpp {
	ATR_NOEXCEPT
	ATR_FINAL
	ATR_OVERRIDE
	SRT_ATR_NODISCARD
}

set ignoreppopt ""
foreach i $ignoredpp {
	lappend ignoreppopt -I $i
}

ag tags -type custom -s $sources $all_headers -runon demand  -output //tags -clean none -flags noclean distclean

# Source dir as relative to the build path - needed where // would not be expanded
set relsrcdir [prelocate $agv::srcdir $agv::builddir]

ag tags -command {
	cd $relsrcdir && ctags --c++-kinds=+px $ignoreppopt -R $sourcedirs && /usr/bin/ctags -a --c++-kinds=+px $ignoreppopt -R $sourcedirs
}

set gtest_inc $agv::builddir/googletest/googletest-src/googletest/include

if {![file exists $agv::builddir/googletest] || ![file exists $agv::builddir/lib]} {
	ag test-srt -type custom -runon demand -command {
		@echo "You need to copy 'googletest' and 'lib' directories from a cmake build directory"
		@echo "Then re-run agcat. Automatic installation is not yet supported."
	}
} else {
	ag test-srt -type program -s [glob test/*.cpp] -I $gtest_inc -depends $TARGET_srt -L //b:lib -libs -- -lgtest -lgtest_main
}


# vim:ft=tclmake
