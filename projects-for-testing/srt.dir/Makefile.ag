package require ag 0.3

set SRT_VERSION 1.2.0
#set VERSION 1.3.0

# Choosing the toolchain profile is a little bit more complicated than just select one.
# There's a separate script for that, pushed there in order not to make so much noise.
source ag/ag-choose-toolchain-profile.tcl
ag-profile posix-install

# Ok, now variables

pinit NAME_haicrypt haicrypt
pinit NAME_srt srt

if { [phas ENABLE_MXPTOOL] } {
	if { $tcl_platform(os) != "Linux" } {
		error "ENABLE_MXPTOOL: MXP is supported only on Linux."
	}
} else {
	set ENABLE_MXPTOOL 0
}

set srt_libspec static

if { [phas USE_DYNAMIC] } {
	set srt_libspec dynamic
	puts "Note: srt package libraries will be compiled as dynamic"
}


ag-profile {c c++} -D {SRT_VERSION=\"$SRT_VERSION\"}


# -- Selecting  debug/release version

# XXX This feature is not yet supported
# if { [ag-config option ?buildtype] == "debug" } {
# 	set SRT_DEBUG_ENABLED 1
# 	set SRT_DEBUG_OPT "-ggdb -O0"
# } else {
# 	set SRT_DEBUG_ENABLED 0
# 	set SRT_DEBUG_OPT "-O2 -DNDEBUG"
# }
# ag-profile {c c++} -cflags $SRT_DEBUG_OPT

if { [phas DEBUG] } {
	ag-profile {c c++} -cflags -- -O0 -g -D_DEBUG
	set ENABLE_LOGGING 1
} else {
	ag-profile {c c++} -cflags -- -O3 -DNDEBUG
}

if { [phas ENABLE_LOGGING] } {
	ag-profile {c c++} -D ENABLE_LOGGING=1
}

# -- Selecting profiled version

if { [phas env(HAI_BUILD_PROFILE)] } {
	puts "+++ Build will include PROFILE INFORMATION"
	set SRT_BUILD_PROFILE 1
} else {
	set SRT_BUILD_PROFILE 0
}

# -- C/C++ header dependency file handling flavor
ag-profile general -depspec cached

# -- Turn on all best debugs
ag-profile general -cflags -- -Wall -Wextra


# Utility to add path prefix to all files in the list
proc InDir {prefix list} {
	return [pdip $prefix/% [plist $list]]
}



# ------------
# Targets
# -----------

# Main target definition: Libraries in the srt package.

if { [phas ENABLE_SEPARATE_HAICRYPT] } {
	set haicrypt_libspec $srt_libspec
} else {
	set haicrypt_libspec virtual
}

set TARGET_srt srt
set TARGET_haicrypt haicrypt

if { [pget WITH_SRT_NAME] != "" } {
	set TARGET_srt $WITH_SRT_NAME
}

if { [pget WITH_HAICRYPT_NAME] != "" } {
	set TARGET_haicrypt $WITH_HAICRYPT_NAME
}

ag $TARGET_haicrypt -type library
ag $TARGET_srt -type library

# XXX
# As Silvercat doesn't support virtual libraries yet,
# we have to screw it up a little bit. This will be changed
# to normal library definition and processing once virtual
# library type is supported.

# Full support of virtual library requires that all sources
# of the dependent library be compiled according to the cflags
# defined in this very library, which need not be the same as
# the cflags defined in the depending library. Only linker flags
# are just integrated linker flags for both. Here it's not preserved.
# {
if { $haicrypt_libspec == "virtual" } {

	# Turn off automatic compiling of this library. Just stays for formality.
	# Set the language manually because without sources it won't be autodetected.
	ag $TARGET_haicrypt -runon demand -language c++

	# Make all next settings for haicrypt apply directly on srt
	set TARGET_haicrypt $TARGET_srt
} else {
	ag $TARGET_haicrypt -install lib -libspec $haicrypt_libspec
	ag $TARGET_srt -depends $TARGET_haicrypt
}
# }

ag $TARGET_srt -install lib -libspec $srt_libspec

# Ok, predefined, now specify the sources and public headers

# mxpc_log - this is an internal logging library used by HaiCrypt and MXP.
# srt_compat - this provides some system dependent, portable features.
# Devel only - compile as static, dependency of haicrypt.
#ag $TARGET_haicrypt -s mxpmod/mxpc_log.c mxpmod/mxpc_err.c common/srt_compat.c
# XXX on Windows add also srtcore/windows/win_time.cpp

# HaiCrypt

set maf_haicrypt [ag-maf $TARGET_haicrypt haicrypt filelist.maf -s SOURCES -h {PUBLIC HEADERS} {PROTECTED HEADERS}]
ag $TARGET_haicrypt -hidir srt
#ag $TARGET_haicrypt -ldflags -- -lcrypto
ag $TARGET_haicrypt -packages libcrypto


if { $tcl_platform(os) == "Windows" } {
	ag-maf $TARGET_haicrypt common filelist_win32.maf -s SOURCES -h "PUBLIC HEADERS"
}

# HaiSRT

set maf_srt [ag-maf $TARGET_srt srtcore filelist.maf -s SOURCES -h {PUBLIC HEADERS} {PROTECTED HEADERS}]
ag $TARGET_srt -hidir srt
if { [pget tcl_platform(os)] == "Linux" } {
	ag $TARGET_srt -ldflags -- -lpthread
}

# Instantiate and install config header
# This is abandoned now. Stays here for historical reasons
#ag-instantiate include/srt_config.h.in
#ag $TARGET_srt -h //b:include/srt_config.h -I //b:include

# XXX use the autogenerated pkg-config type here !!!
ag-instantiate scripts/haisrt.pc.in srt.pc
ag srt_pc -type data -install lib/pkgconfig -s //b:srt.pc

# XXX Use MAF file to specify these details!

# Include directories (see Issue #72)
ag-profile general -I [InDir $agv::srcdir {
	srtcore
	haicrypt
	common
}]

# Definitions
ag-profile general -D {
   _GNU_SOURCE
   HAI_PATCH=1
   HAI_ENABLE_SRT=1
   HAICRYPT_USE_OPENSSL_EVP=1
   HAICRYPT_USE_OPENSSL_AES
}

set linux [expr {[pget tcl_platform(os)] == "Linux" }]

if { $linux } {
	ag-profile general -D LINUX
}

if { $SRT_BUILD_PROFILE } {
	ag-profile general -cflags -- -g -pg

	ag $TARGET_srt -ldflags -- -g -pg
}

# Now collect all source file names for tags

pset sources [pluniq [concat [ag $TARGET_srt ?sources] [ag $TARGET_haicrypt ?sources]]]
pset sourcedirs srtcore common haicrypt mxpmod 

if { $ENABLE_MXPTOOL } {
	pset+ sources [ag srt_mxp ?sources]
	pset+ sourcedirs mxpmod
}

# Secondary target: srt_mxptool

if { $ENABLE_MXPTOOL } {

	ag srt_mxptool {
		-type program
		-install bin
		-s [InDir tools {mxptool.c mxpt_perf.c mxpt_sat.c}]
		-depends srt_mxp
		-ldflags -- -lcrypto -lpthread -lrt
	}

	pset+ sources [ag srt_mxptool ?sources]
}

# Extract all header files for tag generations

set all_headers [concat [dict:sel $maf_srt -glob "* HEADERS"] [dict:sel $maf_haicrypt -glob "* HEADERS"]]

#puts "HEADERS FOR CTAGS: $all_headers"

ag tags -type custom -s $sources $all_headers -runon demand  -output //tags -clean none -flags noclean distclean

ag tags -command {
	cd $::agv::srcdir && ctags --c++-kinds=+px -R $sourcedirs && /usr/bin/ctags -a --c++-kinds=+px -R $sourcedirs
}

proc testprogram {prg args} {
	ag $prg -type program -install bin
	ag $prg -s apps/$prg.cpp [InDir common [concat uriparser.cpp $args]] -I common
	ag $prg -cflags -- -std=c++11
	ag $prg -depends srt -ldflags -- -lcrypto
	if { [pget tcl_platform(os)] == "Linux" } {
		ag $prg -ldflags -- -pthread -lrt
	}
}

# Testprogram: special-case app, which consists of:
# - apps/PROGRAM_NAME.cpp
# - common/uriparser.cpp
# - optional extra sources in common/ directory

testprogram utility-test
testprogram stransmit socketoptions.cpp ;# logsupport.cpp transmitmedia.cpp
#testprogram siplex socketoptions.cpp logsupport.cpp transmitmedia.cpp

proc single-program {sourcename args} {
	set name [file rootname [file tail $sourcename]]
	ag $name -type program -install bin -std c++11 -s $sourcename {*}$args
	return $name
}

ag uriparser-test -type program -s apps/uriparser-test.cpp -D TEST -cflags -- -std=c++11


# vim:ft=tclmake
